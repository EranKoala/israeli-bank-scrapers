"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCurrentUrl = getCurrentUrl;
exports.waitForNavigation = waitForNavigation;
exports.waitForNavigationAndDomLoad = waitForNavigationAndDomLoad;
exports.waitForRedirect = waitForRedirect;
exports.waitForUrl = waitForUrl;
var _waiting = require("./waiting");
async function waitForNavigation(pageOrFrame, options) {
  await pageOrFrame.waitForNavigation(options);
}
async function waitForNavigationAndDomLoad(page) {
  await waitForNavigation(page, {
    waitUntil: 'domcontentloaded'
  });
}
function getCurrentUrl(pageOrFrame, clientSide = false) {
  if (clientSide) {
    return pageOrFrame.evaluate(() => window.location.href);
  }
  return pageOrFrame.url();
}
async function waitForRedirect(pageOrFrame, timeout = 20000, clientSide = false, ignoreList = []) {
  const initial = await getCurrentUrl(pageOrFrame, clientSide);
  await (0, _waiting.waitUntil)(async () => {
    const current = await getCurrentUrl(pageOrFrame, clientSide);
    return current !== initial && !ignoreList.includes(current);
  }, `waiting for redirect from ${initial}`, timeout, 1000);
}
async function waitForUrl(pageOrFrame, url, timeout = 20000, clientSide = false) {
  await (0, _waiting.waitUntil)(async () => {
    const current = await getCurrentUrl(pageOrFrame, clientSide);
    return url instanceof RegExp ? url.test(current) : url === current;
  }, `waiting for url to be ${url}`, timeout, 1000);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfd2FpdGluZyIsInJlcXVpcmUiLCJ3YWl0Rm9yTmF2aWdhdGlvbiIsInBhZ2VPckZyYW1lIiwib3B0aW9ucyIsIndhaXRGb3JOYXZpZ2F0aW9uQW5kRG9tTG9hZCIsInBhZ2UiLCJ3YWl0VW50aWwiLCJnZXRDdXJyZW50VXJsIiwiY2xpZW50U2lkZSIsImV2YWx1YXRlIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwidXJsIiwid2FpdEZvclJlZGlyZWN0IiwidGltZW91dCIsImlnbm9yZUxpc3QiLCJpbml0aWFsIiwiY3VycmVudCIsImluY2x1ZGVzIiwid2FpdEZvclVybCIsIlJlZ0V4cCIsInRlc3QiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvaGVscGVycy9uYXZpZ2F0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHR5cGUgRnJhbWUsIHR5cGUgUGFnZSwgdHlwZSBXYWl0Rm9yT3B0aW9ucyB9IGZyb20gJ3B1cHBldGVlcic7XHJcbmltcG9ydCB7IHdhaXRVbnRpbCB9IGZyb20gJy4vd2FpdGluZyc7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2FpdEZvck5hdmlnYXRpb24ocGFnZU9yRnJhbWU6IFBhZ2UgfCBGcmFtZSwgb3B0aW9ucz86IFdhaXRGb3JPcHRpb25zKSB7XHJcbiAgYXdhaXQgcGFnZU9yRnJhbWUud2FpdEZvck5hdmlnYXRpb24ob3B0aW9ucyk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yTmF2aWdhdGlvbkFuZERvbUxvYWQocGFnZTogUGFnZSkge1xyXG4gIGF3YWl0IHdhaXRGb3JOYXZpZ2F0aW9uKHBhZ2UsIHsgd2FpdFVudGlsOiAnZG9tY29udGVudGxvYWRlZCcgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50VXJsKHBhZ2VPckZyYW1lOiBQYWdlIHwgRnJhbWUsIGNsaWVudFNpZGUgPSBmYWxzZSkge1xyXG4gIGlmIChjbGllbnRTaWRlKSB7XHJcbiAgICByZXR1cm4gcGFnZU9yRnJhbWUuZXZhbHVhdGUoKCkgPT4gd2luZG93LmxvY2F0aW9uLmhyZWYpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHBhZ2VPckZyYW1lLnVybCgpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2FpdEZvclJlZGlyZWN0KFxyXG4gIHBhZ2VPckZyYW1lOiBQYWdlIHwgRnJhbWUsXHJcbiAgdGltZW91dCA9IDIwMDAwLFxyXG4gIGNsaWVudFNpZGUgPSBmYWxzZSxcclxuICBpZ25vcmVMaXN0OiBzdHJpbmdbXSA9IFtdLFxyXG4pIHtcclxuICBjb25zdCBpbml0aWFsID0gYXdhaXQgZ2V0Q3VycmVudFVybChwYWdlT3JGcmFtZSwgY2xpZW50U2lkZSk7XHJcblxyXG4gIGF3YWl0IHdhaXRVbnRpbChcclxuICAgIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgY3VycmVudCA9IGF3YWl0IGdldEN1cnJlbnRVcmwocGFnZU9yRnJhbWUsIGNsaWVudFNpZGUpO1xyXG4gICAgICByZXR1cm4gY3VycmVudCAhPT0gaW5pdGlhbCAmJiAhaWdub3JlTGlzdC5pbmNsdWRlcyhjdXJyZW50KTtcclxuICAgIH0sXHJcbiAgICBgd2FpdGluZyBmb3IgcmVkaXJlY3QgZnJvbSAke2luaXRpYWx9YCxcclxuICAgIHRpbWVvdXQsXHJcbiAgICAxMDAwLFxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yVXJsKHBhZ2VPckZyYW1lOiBQYWdlIHwgRnJhbWUsIHVybDogc3RyaW5nIHwgUmVnRXhwLCB0aW1lb3V0ID0gMjAwMDAsIGNsaWVudFNpZGUgPSBmYWxzZSkge1xyXG4gIGF3YWl0IHdhaXRVbnRpbChcclxuICAgIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgY3VycmVudCA9IGF3YWl0IGdldEN1cnJlbnRVcmwocGFnZU9yRnJhbWUsIGNsaWVudFNpZGUpO1xyXG4gICAgICByZXR1cm4gdXJsIGluc3RhbmNlb2YgUmVnRXhwID8gdXJsLnRlc3QoY3VycmVudCkgOiB1cmwgPT09IGN1cnJlbnQ7XHJcbiAgICB9LFxyXG4gICAgYHdhaXRpbmcgZm9yIHVybCB0byBiZSAke3VybH1gLFxyXG4gICAgdGltZW91dCxcclxuICAgIDEwMDAsXHJcbiAgKTtcclxufVxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFDQSxJQUFBQSxRQUFBLEdBQUFDLE9BQUE7QUFFTyxlQUFlQyxpQkFBaUJBLENBQUNDLFdBQXlCLEVBQUVDLE9BQXdCLEVBQUU7RUFDM0YsTUFBTUQsV0FBVyxDQUFDRCxpQkFBaUIsQ0FBQ0UsT0FBTyxDQUFDO0FBQzlDO0FBRU8sZUFBZUMsMkJBQTJCQSxDQUFDQyxJQUFVLEVBQUU7RUFDNUQsTUFBTUosaUJBQWlCLENBQUNJLElBQUksRUFBRTtJQUFFQyxTQUFTLEVBQUU7RUFBbUIsQ0FBQyxDQUFDO0FBQ2xFO0FBRU8sU0FBU0MsYUFBYUEsQ0FBQ0wsV0FBeUIsRUFBRU0sVUFBVSxHQUFHLEtBQUssRUFBRTtFQUMzRSxJQUFJQSxVQUFVLEVBQUU7SUFDZCxPQUFPTixXQUFXLENBQUNPLFFBQVEsQ0FBQyxNQUFNQyxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDO0VBQ3pEO0VBRUEsT0FBT1YsV0FBVyxDQUFDVyxHQUFHLENBQUMsQ0FBQztBQUMxQjtBQUVPLGVBQWVDLGVBQWVBLENBQ25DWixXQUF5QixFQUN6QmEsT0FBTyxHQUFHLEtBQUssRUFDZlAsVUFBVSxHQUFHLEtBQUssRUFDbEJRLFVBQW9CLEdBQUcsRUFBRSxFQUN6QjtFQUNBLE1BQU1DLE9BQU8sR0FBRyxNQUFNVixhQUFhLENBQUNMLFdBQVcsRUFBRU0sVUFBVSxDQUFDO0VBRTVELE1BQU0sSUFBQUYsa0JBQVMsRUFDYixZQUFZO0lBQ1YsTUFBTVksT0FBTyxHQUFHLE1BQU1YLGFBQWEsQ0FBQ0wsV0FBVyxFQUFFTSxVQUFVLENBQUM7SUFDNUQsT0FBT1UsT0FBTyxLQUFLRCxPQUFPLElBQUksQ0FBQ0QsVUFBVSxDQUFDRyxRQUFRLENBQUNELE9BQU8sQ0FBQztFQUM3RCxDQUFDLEVBQ0QsNkJBQTZCRCxPQUFPLEVBQUUsRUFDdENGLE9BQU8sRUFDUCxJQUNGLENBQUM7QUFDSDtBQUVPLGVBQWVLLFVBQVVBLENBQUNsQixXQUF5QixFQUFFVyxHQUFvQixFQUFFRSxPQUFPLEdBQUcsS0FBSyxFQUFFUCxVQUFVLEdBQUcsS0FBSyxFQUFFO0VBQ3JILE1BQU0sSUFBQUYsa0JBQVMsRUFDYixZQUFZO0lBQ1YsTUFBTVksT0FBTyxHQUFHLE1BQU1YLGFBQWEsQ0FBQ0wsV0FBVyxFQUFFTSxVQUFVLENBQUM7SUFDNUQsT0FBT0ssR0FBRyxZQUFZUSxNQUFNLEdBQUdSLEdBQUcsQ0FBQ1MsSUFBSSxDQUFDSixPQUFPLENBQUMsR0FBR0wsR0FBRyxLQUFLSyxPQUFPO0VBQ3BFLENBQUMsRUFDRCx5QkFBeUJMLEdBQUcsRUFBRSxFQUM5QkUsT0FBTyxFQUNQLElBQ0YsQ0FBQztBQUNIIiwiaWdub3JlTGlzdCI6W119