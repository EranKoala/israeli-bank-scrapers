"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clickButton = clickButton;
exports.clickLink = clickLink;
exports.dropdownElements = dropdownElements;
exports.dropdownSelect = dropdownSelect;
exports.elementPresentOnPage = elementPresentOnPage;
exports.fillInput = fillInput;
exports.pageEval = pageEval;
exports.pageEvalAll = pageEvalAll;
exports.setValue = setValue;
exports.waitUntilElementDisappear = waitUntilElementDisappear;
exports.waitUntilElementFound = waitUntilElementFound;
exports.waitUntilIframeFound = waitUntilIframeFound;
var _waiting = require("./waiting");
async function waitUntilElementFound(page, elementSelector, onlyVisible = false, timeout) {
  await page.waitForSelector(elementSelector, {
    visible: onlyVisible,
    timeout
  });
}
async function waitUntilElementDisappear(page, elementSelector, timeout) {
  await page.waitForSelector(elementSelector, {
    hidden: true,
    timeout
  });
}
async function waitUntilIframeFound(page, framePredicate, description = '', timeout = 30000) {
  let frame;
  await (0, _waiting.waitUntil)(() => {
    frame = page.frames().find(framePredicate);
    return Promise.resolve(!!frame);
  }, description, timeout, 1000);
  if (!frame) {
    throw new Error('failed to find iframe');
  }
  return frame;
}
async function fillInput(pageOrFrame, inputSelector, inputValue) {
  await pageOrFrame.$eval(inputSelector, input => {
    const inputElement = input;
    // @ts-ignore
    inputElement.value = '';
  });
  await pageOrFrame.type(inputSelector, inputValue);
}
async function setValue(pageOrFrame, inputSelector, inputValue) {
  await pageOrFrame.$eval(inputSelector, (input, value) => {
    const inputElement = input;
    // @ts-ignore
    inputElement.value = value;
  }, [inputValue]);
}
async function clickButton(page, buttonSelector) {
  await page.$eval(buttonSelector, el => el.click());
}
async function clickLink(page, aSelector) {
  await page.$eval(aSelector, el => {
    if (!el || typeof el.click === 'undefined') {
      return;
    }
    el.click();
  });
}
async function pageEvalAll(page, selector, defaultResult, callback, ...args) {
  let result = defaultResult;
  try {
    result = await page.$$eval(selector, callback, ...args);
  } catch (e) {
    // TODO temporary workaround to puppeteer@1.5.0 which breaks $$eval bevahvior until they will release a new version.
    if (!e.message.startsWith('Error: failed to find elements matching selector')) {
      throw e;
    }
  }
  return result;
}
async function pageEval(pageOrFrame, selector, defaultResult, callback, ...args) {
  let result = defaultResult;
  try {
    result = await pageOrFrame.$eval(selector, callback, ...args);
  } catch (e) {
    // TODO temporary workaround to puppeteer@1.5.0 which breaks $$eval bevahvior until they will release a new version.
    if (!e.message.startsWith('Error: failed to find element matching selector')) {
      throw e;
    }
  }
  return result;
}
async function elementPresentOnPage(pageOrFrame, selector) {
  return (await pageOrFrame.$(selector)) !== null;
}
async function dropdownSelect(page, selectSelector, value) {
  await page.select(selectSelector, value);
}
async function dropdownElements(page, selector) {
  const options = await page.evaluate(optionSelector => {
    return Array.from(document.querySelectorAll(optionSelector)).filter(o => o.value).map(o => {
      return {
        name: o.text,
        value: o.value
      };
    });
  }, `${selector} > option`);
  return options;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,