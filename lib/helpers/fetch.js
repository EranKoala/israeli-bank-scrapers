"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchGet = fetchGet;
exports.fetchGetWithinPage = fetchGetWithinPage;
exports.fetchGraphql = fetchGraphql;
exports.fetchPost = fetchPost;
exports.fetchPostWithinPage = fetchPostWithinPage;
var _nodeFetch = _interopRequireDefault(require("node-fetch"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const JSON_CONTENT_TYPE = 'application/json';
function getJsonHeaders() {
  return {
    Accept: JSON_CONTENT_TYPE,
    'Content-Type': JSON_CONTENT_TYPE
  };
}
async function fetchGet(url, extraHeaders) {
  let headers = getJsonHeaders();
  if (extraHeaders) {
    headers = Object.assign(headers, extraHeaders);
  }
  const request = {
    method: 'GET',
    headers
  };
  const fetchResult = await (0, _nodeFetch.default)(url, request);
  if (fetchResult.status !== 200) {
    throw new Error(`sending a request to the institute server returned with status code ${fetchResult.status}`);
  }
  return fetchResult.json();
}
async function fetchPost(url, data, extraHeaders = {}) {
  const request = {
    method: 'POST',
    headers: {
      ...getJsonHeaders(),
      ...extraHeaders
    },
    body: JSON.stringify(data)
  };
  const result = await (0, _nodeFetch.default)(url, request);
  return result.json();
}
async function fetchGraphql(url, query, variables = {}, extraHeaders = {}) {
  const result = await fetchPost(url, {
    operationName: null,
    query,
    variables
  }, extraHeaders);
  if (result.errors?.length) {
    throw new Error(result.errors[0].message);
  }
  return result.data;
}
function fetchGetWithinPage(page, url) {
  return page.evaluate(innerUrl => {
    return new Promise((resolve, reject) => {
      fetch(innerUrl, {
        credentials: 'include'
      }).then(result => {
        if (result.status === 204) {
          resolve(null);
        } else {
          resolve(result.json());
        }
      }).catch(e => {
        reject(e);
      });
    });
  }, url);
}
function fetchPostWithinPage(page, url, data, extraHeaders = {}) {
  return page.evaluate((innerUrl, innerData, innerExtraHeaders) => {
    return new Promise((resolve, reject) => {
      fetch(innerUrl, {
        method: 'POST',
        body: JSON.stringify(innerData),
        credentials: 'include',
        // eslint-disable-next-line prefer-object-spread
        headers: Object.assign({
          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
        }, innerExtraHeaders)
      }).then(result => {
        if (result.status === 204) {
          // No content response
          resolve(null);
        } else {
          resolve(result.json());
        }
      }).catch(e => {
        reject(e);
      });
    });
  }, url, data, extraHeaders);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,