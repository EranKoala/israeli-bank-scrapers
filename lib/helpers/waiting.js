"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeoutError = exports.SECOND = void 0;
exports.raceTimeout = raceTimeout;
exports.runSerial = runSerial;
exports.sleep = sleep;
exports.waitUntil = waitUntil;
class TimeoutError extends Error {}
exports.TimeoutError = TimeoutError;
const SECOND = exports.SECOND = 1000;
function timeoutPromise(ms, promise, description) {
  const timeout = new Promise((_, reject) => {
    const id = setTimeout(() => {
      clearTimeout(id);
      const error = new TimeoutError(description);
      reject(error);
    }, ms);
  });
  return Promise.race([promise,
  // casting to avoid type error- safe since this promise will always reject
  timeout]);
}

/**
 * Wait until a promise resolves with a truthy value or reject after a timeout
 */
function waitUntil(asyncTest, description = '', timeout = 10000, interval = 100) {
  const promise = new Promise((resolve, reject) => {
    function wait() {
      asyncTest().then(value => {
        if (value) {
          resolve(value);
        } else {
          setTimeout(wait, interval);
        }
      }).catch(() => {
        reject();
      });
    }
    wait();
  });
  return timeoutPromise(timeout, promise, description);
}
function raceTimeout(ms, promise) {
  return timeoutPromise(ms, promise, 'timeout').catch(err => {
    if (!(err instanceof TimeoutError)) throw err;
  });
}
function runSerial(actions) {
  return actions.reduce((m, a) => m.then(async x => [...x, await a()]), Promise.resolve(new Array()));
}
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUaW1lb3V0RXJyb3IiLCJFcnJvciIsImV4cG9ydHMiLCJTRUNPTkQiLCJ0aW1lb3V0UHJvbWlzZSIsIm1zIiwicHJvbWlzZSIsImRlc2NyaXB0aW9uIiwidGltZW91dCIsIlByb21pc2UiLCJfIiwicmVqZWN0IiwiaWQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiZXJyb3IiLCJyYWNlIiwid2FpdFVudGlsIiwiYXN5bmNUZXN0IiwiaW50ZXJ2YWwiLCJyZXNvbHZlIiwid2FpdCIsInRoZW4iLCJ2YWx1ZSIsImNhdGNoIiwicmFjZVRpbWVvdXQiLCJlcnIiLCJydW5TZXJpYWwiLCJhY3Rpb25zIiwicmVkdWNlIiwibSIsImEiLCJ4IiwiQXJyYXkiLCJzbGVlcCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL3dhaXRpbmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFRpbWVvdXRFcnJvciBleHRlbmRzIEVycm9yIHt9XHJcblxyXG5leHBvcnQgY29uc3QgU0VDT05EID0gMTAwMDtcclxuXHJcbmZ1bmN0aW9uIHRpbWVvdXRQcm9taXNlPFQ+KG1zOiBudW1iZXIsIHByb21pc2U6IFByb21pc2U8VD4sIGRlc2NyaXB0aW9uOiBzdHJpbmcpOiBQcm9taXNlPFQ+IHtcclxuICBjb25zdCB0aW1lb3V0ID0gbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4ge1xyXG4gICAgY29uc3QgaWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcclxuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgVGltZW91dEVycm9yKGRlc2NyaXB0aW9uKTtcclxuICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgIH0sIG1zKTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIFByb21pc2UucmFjZShbXHJcbiAgICBwcm9taXNlLFxyXG4gICAgLy8gY2FzdGluZyB0byBhdm9pZCB0eXBlIGVycm9yLSBzYWZlIHNpbmNlIHRoaXMgcHJvbWlzZSB3aWxsIGFsd2F5cyByZWplY3RcclxuICAgIHRpbWVvdXQgYXMgUHJvbWlzZTxUPixcclxuICBdKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFdhaXQgdW50aWwgYSBwcm9taXNlIHJlc29sdmVzIHdpdGggYSB0cnV0aHkgdmFsdWUgb3IgcmVqZWN0IGFmdGVyIGEgdGltZW91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHdhaXRVbnRpbDxUPihhc3luY1Rlc3Q6ICgpID0+IFByb21pc2U8VD4sIGRlc2NyaXB0aW9uID0gJycsIHRpbWVvdXQgPSAxMDAwMCwgaW50ZXJ2YWwgPSAxMDApIHtcclxuICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgZnVuY3Rpb24gd2FpdCgpIHtcclxuICAgICAgYXN5bmNUZXN0KClcclxuICAgICAgICAudGhlbih2YWx1ZSA9PiB7XHJcbiAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHdhaXQsIGludGVydmFsKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7XHJcbiAgICAgICAgICByZWplY3QoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHdhaXQoKTtcclxuICB9KTtcclxuICByZXR1cm4gdGltZW91dFByb21pc2UodGltZW91dCwgcHJvbWlzZSwgZGVzY3JpcHRpb24pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmFjZVRpbWVvdXQobXM6IG51bWJlciwgcHJvbWlzZTogUHJvbWlzZTxhbnk+KSB7XHJcbiAgcmV0dXJuIHRpbWVvdXRQcm9taXNlKG1zLCBwcm9taXNlLCAndGltZW91dCcpLmNhdGNoKGVyciA9PiB7XHJcbiAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiBUaW1lb3V0RXJyb3IpKSB0aHJvdyBlcnI7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBydW5TZXJpYWw8VD4oYWN0aW9uczogKCgpID0+IFByb21pc2U8VD4pW10pOiBQcm9taXNlPFRbXT4ge1xyXG4gIHJldHVybiBhY3Rpb25zLnJlZHVjZSgobSwgYSkgPT4gbS50aGVuKGFzeW5jIHggPT4gWy4uLngsIGF3YWl0IGEoKV0pLCBQcm9taXNlLnJlc29sdmU8VFtdPihuZXcgQXJyYXk8VD4oKSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2xlZXAobXM6IG51bWJlcikge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcclxufVxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBTyxNQUFNQSxZQUFZLFNBQVNDLEtBQUssQ0FBQztBQUFFQyxPQUFBLENBQUFGLFlBQUEsR0FBQUEsWUFBQTtBQUVuQyxNQUFNRyxNQUFNLEdBQUFELE9BQUEsQ0FBQUMsTUFBQSxHQUFHLElBQUk7QUFFMUIsU0FBU0MsY0FBY0EsQ0FBSUMsRUFBVSxFQUFFQyxPQUFtQixFQUFFQyxXQUFtQixFQUFjO0VBQzNGLE1BQU1DLE9BQU8sR0FBRyxJQUFJQyxPQUFPLENBQUMsQ0FBQ0MsQ0FBQyxFQUFFQyxNQUFNLEtBQUs7SUFDekMsTUFBTUMsRUFBRSxHQUFHQyxVQUFVLENBQUMsTUFBTTtNQUMxQkMsWUFBWSxDQUFDRixFQUFFLENBQUM7TUFDaEIsTUFBTUcsS0FBSyxHQUFHLElBQUlmLFlBQVksQ0FBQ08sV0FBVyxDQUFDO01BQzNDSSxNQUFNLENBQUNJLEtBQUssQ0FBQztJQUNmLENBQUMsRUFBRVYsRUFBRSxDQUFDO0VBQ1IsQ0FBQyxDQUFDO0VBRUYsT0FBT0ksT0FBTyxDQUFDTyxJQUFJLENBQUMsQ0FDbEJWLE9BQU87RUFDUDtFQUNBRSxPQUFPLENBQ1IsQ0FBQztBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNPLFNBQVNTLFNBQVNBLENBQUlDLFNBQTJCLEVBQUVYLFdBQVcsR0FBRyxFQUFFLEVBQUVDLE9BQU8sR0FBRyxLQUFLLEVBQUVXLFFBQVEsR0FBRyxHQUFHLEVBQUU7RUFDM0csTUFBTWIsT0FBTyxHQUFHLElBQUlHLE9BQU8sQ0FBSSxDQUFDVyxPQUFPLEVBQUVULE1BQU0sS0FBSztJQUNsRCxTQUFTVSxJQUFJQSxDQUFBLEVBQUc7TUFDZEgsU0FBUyxDQUFDLENBQUMsQ0FDUkksSUFBSSxDQUFDQyxLQUFLLElBQUk7UUFDYixJQUFJQSxLQUFLLEVBQUU7VUFDVEgsT0FBTyxDQUFDRyxLQUFLLENBQUM7UUFDaEIsQ0FBQyxNQUFNO1VBQ0xWLFVBQVUsQ0FBQ1EsSUFBSSxFQUFFRixRQUFRLENBQUM7UUFDNUI7TUFDRixDQUFDLENBQUMsQ0FDREssS0FBSyxDQUFDLE1BQU07UUFDWGIsTUFBTSxDQUFDLENBQUM7TUFDVixDQUFDLENBQUM7SUFDTjtJQUNBVSxJQUFJLENBQUMsQ0FBQztFQUNSLENBQUMsQ0FBQztFQUNGLE9BQU9qQixjQUFjLENBQUNJLE9BQU8sRUFBRUYsT0FBTyxFQUFFQyxXQUFXLENBQUM7QUFDdEQ7QUFFTyxTQUFTa0IsV0FBV0EsQ0FBQ3BCLEVBQVUsRUFBRUMsT0FBcUIsRUFBRTtFQUM3RCxPQUFPRixjQUFjLENBQUNDLEVBQUUsRUFBRUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDa0IsS0FBSyxDQUFDRSxHQUFHLElBQUk7SUFDekQsSUFBSSxFQUFFQSxHQUFHLFlBQVkxQixZQUFZLENBQUMsRUFBRSxNQUFNMEIsR0FBRztFQUMvQyxDQUFDLENBQUM7QUFDSjtBQUVPLFNBQVNDLFNBQVNBLENBQUlDLE9BQTZCLEVBQWdCO0VBQ3hFLE9BQU9BLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxLQUFLRCxDQUFDLENBQUNSLElBQUksQ0FBQyxNQUFNVSxDQUFDLElBQUksQ0FBQyxHQUFHQSxDQUFDLEVBQUUsTUFBTUQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUV0QixPQUFPLENBQUNXLE9BQU8sQ0FBTSxJQUFJYSxLQUFLLENBQUksQ0FBQyxDQUFDLENBQUM7QUFDN0c7QUFFTyxTQUFTQyxLQUFLQSxDQUFDN0IsRUFBVSxFQUFFO0VBQ2hDLE9BQU8sSUFBSUksT0FBTyxDQUFDVyxPQUFPLElBQUlQLFVBQVUsQ0FBQ08sT0FBTyxFQUFFZixFQUFFLENBQUMsQ0FBQztBQUN4RCIsImlnbm9yZUxpc3QiOltdfQ==