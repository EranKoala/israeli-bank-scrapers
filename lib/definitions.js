"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScraperProgressTypes = exports.SCRAPERS = exports.PASSWORD_FIELD = exports.CompanyTypes = void 0;
// NOTICE: avoid changing exported keys as they are part of the public api

const PASSWORD_FIELD = exports.PASSWORD_FIELD = 'password';
let CompanyTypes = exports.CompanyTypes = /*#__PURE__*/function (CompanyTypes) {
  CompanyTypes["hapoalim"] = "hapoalim";
  CompanyTypes["beinleumi"] = "beinleumi";
  CompanyTypes["union"] = "union";
  CompanyTypes["amex"] = "amex";
  CompanyTypes["isracard"] = "isracard";
  CompanyTypes["visaCal"] = "visaCal";
  CompanyTypes["max"] = "max";
  CompanyTypes["otsarHahayal"] = "otsarHahayal";
  CompanyTypes["discount"] = "discount";
  CompanyTypes["mercantile"] = "mercantile";
  CompanyTypes["mizrahi"] = "mizrahi";
  CompanyTypes["leumi"] = "leumi";
  CompanyTypes["massad"] = "massad";
  CompanyTypes["yahav"] = "yahav";
  CompanyTypes["behatsdaa"] = "behatsdaa";
  CompanyTypes["beyahadBishvilha"] = "beyahadBishvilha";
  CompanyTypes["oneZero"] = "oneZero";
  CompanyTypes["pagi"] = "pagi";
  return CompanyTypes;
}({});
const SCRAPERS = exports.SCRAPERS = {
  [CompanyTypes.hapoalim]: {
    name: 'Bank Hapoalim',
    loginFields: ['userCode', PASSWORD_FIELD]
  },
  [CompanyTypes.leumi]: {
    name: 'Bank Leumi',
    loginFields: ['username', PASSWORD_FIELD]
  },
  [CompanyTypes.mizrahi]: {
    name: 'Mizrahi Bank',
    loginFields: ['username', PASSWORD_FIELD]
  },
  [CompanyTypes.discount]: {
    name: 'Discount Bank',
    loginFields: ['id', PASSWORD_FIELD, 'num']
  },
  [CompanyTypes.mercantile]: {
    name: 'Mercantile Bank',
    loginFields: ['id', PASSWORD_FIELD, 'num']
  },
  [CompanyTypes.otsarHahayal]: {
    name: 'Bank Otsar Hahayal',
    loginFields: ['username', PASSWORD_FIELD]
  },
  [CompanyTypes.max]: {
    name: 'Max',
    loginFields: ['username', PASSWORD_FIELD]
  },
  [CompanyTypes.visaCal]: {
    name: 'Visa Cal',
    loginFields: ['username', PASSWORD_FIELD]
  },
  [CompanyTypes.isracard]: {
    name: 'Isracard',
    loginFields: ['id', 'card6Digits', PASSWORD_FIELD]
  },
  [CompanyTypes.amex]: {
    name: 'Amex',
    loginFields: ['id', 'card6Digits', PASSWORD_FIELD]
  },
  [CompanyTypes.union]: {
    name: 'Union',
    loginFields: ['username', PASSWORD_FIELD]
  },
  [CompanyTypes.beinleumi]: {
    name: 'Beinleumi',
    loginFields: ['username', PASSWORD_FIELD]
  },
  [CompanyTypes.massad]: {
    name: 'Massad',
    loginFields: ['username', PASSWORD_FIELD]
  },
  [CompanyTypes.yahav]: {
    name: 'Bank Yahav',
    loginFields: ['username', 'nationalID', PASSWORD_FIELD]
  },
  [CompanyTypes.beyahadBishvilha]: {
    name: 'Beyahad Bishvilha',
    loginFields: ['id', PASSWORD_FIELD]
  },
  [CompanyTypes.oneZero]: {
    name: 'One Zero',
    loginFields: ['email', PASSWORD_FIELD, 'otpCodeRetriever', 'phoneNumber', 'otpLongTermToken']
  },
  [CompanyTypes.behatsdaa]: {
    name: 'Behatsdaa',
    loginFields: ['id', PASSWORD_FIELD]
  },
  [CompanyTypes.pagi]: {
    name: 'Pagi',
    loginFields: ['username', PASSWORD_FIELD]
  }
};
let ScraperProgressTypes = exports.ScraperProgressTypes = /*#__PURE__*/function (ScraperProgressTypes) {
  ScraperProgressTypes["Initializing"] = "INITIALIZING";
  ScraperProgressTypes["StartScraping"] = "START_SCRAPING";
  ScraperProgressTypes["LoggingIn"] = "LOGGING_IN";
  ScraperProgressTypes["LoginSuccess"] = "LOGIN_SUCCESS";
  ScraperProgressTypes["LoginFailed"] = "LOGIN_FAILED";
  ScraperProgressTypes["ChangePassword"] = "CHANGE_PASSWORD";
  ScraperProgressTypes["EndScraping"] = "END_SCRAPING";
  ScraperProgressTypes["Terminating"] = "TERMINATING";
  return ScraperProgressTypes;
}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,