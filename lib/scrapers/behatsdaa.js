"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _moment = _interopRequireDefault(require("moment"));
var _debug = require("../helpers/debug");
var _elementsInteractions = require("../helpers/elements-interactions");
var _fetch = require("../helpers/fetch");
var _waiting = require("../helpers/waiting");
var _transactions = require("../transactions");
var _baseScraperWithBrowser = require("./base-scraper-with-browser");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const BASE_URL = 'https://www.behatsdaa.org.il';
const LOGIN_URL = `${BASE_URL}/login`;
const PURCHASE_HISTORY_URL = 'https://back.behatsdaa.org.il/api/purchases/purchaseHistory';
const debug = (0, _debug.getDebug)('behatsdaa');
function variantToTransaction(variant) {
  // The price is positive, make it negative as it's an expense
  const originalAmount = -variant.customerPrice;
  return {
    type: _transactions.TransactionTypes.Normal,
    identifier: variant.tTransactionID,
    date: (0, _moment.default)(variant.orderDate).format('YYYY-MM-DD'),
    processedDate: (0, _moment.default)(variant.orderDate).format('YYYY-MM-DD'),
    originalAmount,
    originalCurrency: 'ILS',
    chargedAmount: originalAmount,
    chargedCurrency: 'ILS',
    description: variant.name,
    status: _transactions.TransactionStatuses.Completed,
    memo: variant.variantName
  };
}
class BehatsdaaScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
  getLoginOptions(credentials) {
    return {
      loginUrl: LOGIN_URL,
      fields: [{
        selector: '#loginId',
        value: credentials.id
      }, {
        selector: '#loginPassword',
        value: credentials.password
      }],
      checkReadiness: async () => {
        await Promise.all([(0, _elementsInteractions.waitUntilElementFound)(this.page, '#loginPassword'), (0, _elementsInteractions.waitUntilElementFound)(this.page, '#loginId')]);
      },
      possibleResults: {
        [_baseScraperWithBrowser.LoginResults.Success]: [`${BASE_URL}/`],
        [_baseScraperWithBrowser.LoginResults.InvalidPassword]: ['.custom-input-error-label']
      },
      submitButtonSelector: async () => {
        await (0, _waiting.sleep)(1000);
        debug('Trying to find submit button');
        const button = await this.page.$('xpath=//button[contains(., "התחברות")]');
        if (button) {
          debug('Submit button found');
          await button.click();
        } else {
          debug('Submit button not found');
        }
      }
    };
  }
  async fetchData() {
    const token = await this.page.evaluate(() => window.localStorage.getItem('userToken'));
    if (!token) {
      debug('Token not found in local storage');
      return {
        success: false,
        errorMessage: 'TokenNotFound'
      };
    }
    const body = {
      FromDate: (0, _moment.default)(this.options.startDate).format('YYYY-MM-DDTHH:mm:ss'),
      ToDate: (0, _moment.default)().format('YYYY-MM-DDTHH:mm:ss'),
      BenefitStatusId: null
    };
    debug('Fetching data');
    const res = await (0, _fetch.fetchPostWithinPage)(this.page, PURCHASE_HISTORY_URL, body, {
      authorization: `Bearer ${token}`,
      'Content-Type': 'application/json',
      organizationid: '20'
    });
    debug('Data fetched');
    if (res?.errorDescription || res?.data?.errorDescription) {
      debug('Error fetching data', res.errorDescription || res.data?.errorDescription);
      return {
        success: false,
        errorMessage: res.errorDescription
      };
    }
    if (!res?.data) {
      debug('No data found');
      return {
        success: false,
        errorMessage: 'NoData'
      };
    }
    debug('Data fetched successfully');
    return {
      success: true,
      accounts: [{
        accountNumber: res.data.memberId,
        txns: res.data.variants.map(variantToTransaction)
      }]
    };
  }
}
var _default = exports.default = BehatsdaaScraper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,