"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _moment = _interopRequireDefault(require("moment"));
var _constants = require("../constants");
var _debug = require("../helpers/debug");
var _elementsInteractions = require("../helpers/elements-interactions");
var _navigation = require("../helpers/navigation");
var _transactions = require("../transactions");
var _baseScraperWithBrowser = require("./base-scraper-with-browser");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.getDebug)('leumi');
const BASE_URL = 'https://hb2.bankleumi.co.il';
const LOGIN_URL = 'https://www.leumi.co.il/';
const TRANSACTIONS_URL = `${BASE_URL}/eBanking/SO/SPA.aspx#/ts/BusinessAccountTrx?WidgetPar=1`;
const FILTERED_TRANSACTIONS_URL = `${BASE_URL}/ChannelWCF/Broker.svc/ProcessRequest?moduleName=UC_SO_27_GetBusinessAccountTrx`;
const DATE_FORMAT = 'DD.MM.YY';
const ACCOUNT_BLOCKED_MSG = 'המנוי חסום';
const INVALID_PASSWORD_MSG = 'אחד או יותר מפרטי ההזדהות שמסרת שגויים. ניתן לנסות שוב';
function getPossibleLoginResults() {
  const urls = {
    [_baseScraperWithBrowser.LoginResults.Success]: [/ebanking\/SO\/SPA.aspx/i, /staticcontent\/digitalfront\/he/i, /staticcontent\/gate-keeper\/he/i],
    [_baseScraperWithBrowser.LoginResults.InvalidPassword]: [async options => {
      if (!options || !options.page) {
        throw new Error('missing page options argument');
      }
      const errorMessage = await (0, _elementsInteractions.pageEvalAll)(options.page, 'svg#Capa_1', '', element => {
        return element[0]?.parentElement?.children[1]?.innerText;
      });
      return errorMessage?.startsWith(INVALID_PASSWORD_MSG);
    }],
    [_baseScraperWithBrowser.LoginResults.AccountBlocked]: [
    // NOTICE - might not be relevant starting the Leumi re-design during 2022 Sep
    async options => {
      if (!options || !options.page) {
        throw new Error('missing page options argument');
      }
      const errorMessage = await (0, _elementsInteractions.pageEvalAll)(options.page, '.errHeader', '', label => {
        return label[0]?.innerText;
      });
      return errorMessage?.startsWith(ACCOUNT_BLOCKED_MSG);
    }],
    [_baseScraperWithBrowser.LoginResults.ChangePassword]: ['https://hb2.bankleumi.co.il/authenticate'] // NOTICE - might not be relevant starting the Leumi re-design during 2022 Sep
  };
  return urls;
}
function createLoginFields(credentials) {
  return [{
    selector: 'input[placeholder="שם משתמש"]',
    value: credentials.username
  }, {
    selector: 'input[placeholder="סיסמה"]',
    value: credentials.password
  }];
}
function extractTransactionsFromPage(transactions, status) {
  if (transactions === null || transactions.length === 0) {
    return [];
  }
  const result = transactions.map(rawTransaction => {
    const date = (0, _moment.default)(rawTransaction.DateUTC).milliseconds(0).toISOString();
    const newTransaction = {
      status,
      type: _transactions.TransactionTypes.Normal,
      date,
      processedDate: date,
      description: rawTransaction.Description || '',
      identifier: rawTransaction.ReferenceNumberLong,
      memo: rawTransaction.AdditionalData || '',
      originalCurrency: _constants.SHEKEL_CURRENCY,
      chargedAmount: rawTransaction.Amount,
      originalAmount: rawTransaction.Amount
    };
    return newTransaction;
  });
  return result;
}
function hangProcess(timeout) {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve();
    }, timeout);
  });
}
async function clickByXPath(page, xpath) {
  await page.waitForSelector(xpath, {
    timeout: 30000,
    visible: true
  });
  const elm = await page.$$(xpath);
  await elm[0].click();
}
function removeSpecialCharacters(str) {
  return str.replace(/[^0-9/-]/g, '');
}
async function fetchTransactionsForAccount(page, startDate, accountId) {
  // DEVELOPER NOTICE the account number received from the server is being altered at
  // runtime for some accounts after 1-2 seconds so we need to hang the process for a short while.
  await hangProcess(4000);
  await (0, _elementsInteractions.waitUntilElementFound)(page, 'button[title="חיפוש מתקדם"]', true);
  await (0, _elementsInteractions.clickButton)(page, 'button[title="חיפוש מתקדם"]');
  await (0, _elementsInteractions.waitUntilElementFound)(page, 'bll-radio-button', true);
  await (0, _elementsInteractions.clickButton)(page, 'bll-radio-button:not([checked])');
  await (0, _elementsInteractions.waitUntilElementFound)(page, 'input[formcontrolname="txtInputFrom"]', true);
  await (0, _elementsInteractions.fillInput)(page, 'input[formcontrolname="txtInputFrom"]', startDate.format(DATE_FORMAT));

  // we must blur the from control otherwise the search will use the previous value
  await page.focus("button[aria-label='סנן']");
  await (0, _elementsInteractions.clickButton)(page, "button[aria-label='סנן']");
  const finalResponse = await page.waitForResponse(response => {
    return response.url() === FILTERED_TRANSACTIONS_URL && response.request().method() === 'POST';
  });
  const responseJson = await finalResponse.json();
  const accountNumber = accountId.replace('/', '_').replace(/[^\d-_]/g, '');
  const response = JSON.parse(responseJson.jsonResp);
  const pendingTransactions = response.TodayTransactionsItems;
  const transactions = response.HistoryTransactionsItems;
  const balance = response.BalanceDisplay ? parseFloat(response.BalanceDisplay) : undefined;
  const pendingTxns = extractTransactionsFromPage(pendingTransactions, _transactions.TransactionStatuses.Pending);
  const completedTxns = extractTransactionsFromPage(transactions, _transactions.TransactionStatuses.Completed);
  const txns = [...pendingTxns, ...completedTxns];
  return {
    accountNumber,
    balance,
    txns
  };
}
async function fetchTransactions(page, startDate) {
  debug('Starting transaction fetch');
  const accounts = [];

  // DEVELOPER NOTICE the account number received from the server is being altered at
  // runtime for some accounts after 1-2 seconds so we need to hang the process for a short while.
  debug('Waiting for account elements to stabilize...');
  await hangProcess(4000);
  debug('Current URL: %s', page.url());
  const accountsIds = await page.evaluate(() => Array.from(document.querySelectorAll('app-masked-number-combo span.display-number-li'), e => e.textContent));

  // due to a bug, the altered value might include undesired signs like & that should be removed

  if (!accountsIds.length) {
    throw new Error('Failed to extract or parse the account number');
  }
  for (const accountId of accountsIds) {
    if (accountsIds.length > 1) {
      // get list of accounts and check accountId
      await clickByXPath(page, 'xpath///*[contains(@class, "number") and contains(@class, "combo-inner")]');
      await clickByXPath(page, `xpath///span[contains(text(), '${accountId}')]`);
    }
    accounts.push(await fetchTransactionsForAccount(page, startDate, removeSpecialCharacters(accountId)));
  }
  return accounts;
}
async function navigateToLogin(page) {
  const loginButtonSelector = '.enter-account a[originaltitle="כניסה לחשבונך"]';
  debug('wait for homepage to click on login button');
  await (0, _elementsInteractions.waitUntilElementFound)(page, loginButtonSelector);
  debug('navigate to login page');
  const loginUrl = await (0, _elementsInteractions.pageEval)(page, loginButtonSelector, null, element => {
    return element.href;
  });
  debug(`navigating to page (${loginUrl})`);
  await page.goto(loginUrl);
  debug('waiting for page to be loaded (networkidle2)');
  await (0, _navigation.waitForNavigation)(page, {
    waitUntil: 'networkidle2'
  });
  debug('waiting for components of login to enter credentials');
  await Promise.all([(0, _elementsInteractions.waitUntilElementFound)(page, 'input[placeholder="שם משתמש"]', true), (0, _elementsInteractions.waitUntilElementFound)(page, 'input[placeholder="סיסמה"]', true), (0, _elementsInteractions.waitUntilElementFound)(page, 'button[type="submit"]', true)]);
}
async function waitForPostLogin(page) {
  debug('Waiting for post-login navigation...');

  // Use URL-based detection instead of problematic XPath
  await Promise.race([
  // Wait for successful navigation to Leumi's authenticated pages
  page.waitForFunction(() => {
    const url = window.location.href;
    return url.includes('/ebanking/SO/SPA.aspx') || url.includes('/staticcontent/digitalfront/he') || url.includes('/staticcontent/gate-keeper/he');
  }, {
    timeout: 60000
  }),
  // Still check for error elements, but use more reliable selectors
  (0, _elementsInteractions.waitUntilElementFound)(page, 'a[title="דלג לחשבון"]', true, 60000), (0, _elementsInteractions.waitUntilElementFound)(page, 'div.main-content', false, 60000), (0, _elementsInteractions.waitUntilElementFound)(page, 'form[action="/changepassword"]', true, 60000)]);
  debug('Post-login navigation completed, current URL: %s', page.url());
}
class LeumiScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
  getLoginOptions(credentials) {
    return {
      loginUrl: LOGIN_URL,
      fields: createLoginFields(credentials),
      submitButtonSelector: "button[type='submit']",
      checkReadiness: async () => navigateToLogin(this.page),
      postAction: async () => waitForPostLogin(this.page),
      possibleResults: getPossibleLoginResults()
    };
  }
  async fetchData() {
    const minimumStartMoment = (0, _moment.default)().subtract(3, 'years').add(1, 'day');
    const defaultStartMoment = (0, _moment.default)().subtract(1, 'years').add(1, 'day');
    const startDate = this.options.startDate || defaultStartMoment.toDate();
    const startMoment = _moment.default.max(minimumStartMoment, (0, _moment.default)(startDate));

    // Wait for login session to be fully established
    debug('Waiting for login session to stabilize...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    await this.navigateTo(TRANSACTIONS_URL);
    const accounts = await fetchTransactions(this.page, startMoment);
    return {
      success: true,
      accounts
    };
  }
}
var _default = exports.default = LeumiScraper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,