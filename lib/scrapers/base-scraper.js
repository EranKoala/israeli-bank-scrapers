"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseScraper = void 0;
var _events = require("events");
var _momentTimezone = _interopRequireDefault(require("moment-timezone"));
var _definitions = require("../definitions");
var _waiting = require("../helpers/waiting");
var _errors = require("./errors");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const SCRAPE_PROGRESS = 'SCRAPE_PROGRESS';
class BaseScraper {
  eventEmitter = new _events.EventEmitter();
  constructor(options) {
    this.options = options;
  }

  // eslint-disable-next-line  @typescript-eslint/require-await
  async initialize() {
    this.emitProgress(_definitions.ScraperProgressTypes.Initializing);
    _momentTimezone.default.tz.setDefault('Asia/Jerusalem');
  }
  async scrape(credentials) {
    this.emitProgress(_definitions.ScraperProgressTypes.StartScraping);
    await this.initialize();
    let loginResult;
    try {
      loginResult = await this.login(credentials);
    } catch (e) {
      loginResult = e instanceof _waiting.TimeoutError ? (0, _errors.createTimeoutError)(e.message) : (0, _errors.createGenericError)(e.message);
    }
    let scrapeResult;
    if (loginResult.success) {
      try {
        scrapeResult = await this.fetchData();
      } catch (e) {
        scrapeResult = e instanceof _waiting.TimeoutError ? (0, _errors.createTimeoutError)(e.message) : (0, _errors.createGenericError)(e.message);
      }
    } else {
      scrapeResult = loginResult;
    }
    try {
      const success = scrapeResult && scrapeResult.success === true;
      await this.terminate(success);
    } catch (e) {
      scrapeResult = (0, _errors.createGenericError)(e.message);
    }
    this.emitProgress(_definitions.ScraperProgressTypes.EndScraping);
    return scrapeResult;
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/require-await
  triggerTwoFactorAuth(_phoneNumber) {
    throw new Error(`triggerOtp() is not created in ${this.options.companyId}`);
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/require-await
  getLongTermTwoFactorToken(_otpCode) {
    throw new Error(`getPermanentOtpToken() is not created in ${this.options.companyId}`);
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/require-await
  async login(_credentials) {
    throw new Error(`login() is not created in ${this.options.companyId}`);
  }

  // eslint-disable-next-line  @typescript-eslint/require-await
  async fetchData() {
    throw new Error(`fetchData() is not created in ${this.options.companyId}`);
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/require-await
  async terminate(_success) {
    this.emitProgress(_definitions.ScraperProgressTypes.Terminating);
  }
  emitProgress(type) {
    this.emit(SCRAPE_PROGRESS, {
      type
    });
  }
  emit(eventName, payload) {
    this.eventEmitter.emit(eventName, this.options.companyId, payload);
  }
  onProgress(func) {
    this.eventEmitter.on(SCRAPE_PROGRESS, func);
  }
}
exports.BaseScraper = BaseScraper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,